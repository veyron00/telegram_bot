import datetime
import re

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import ParseMode, InputMediaPhoto
from loguru import logger

from database.connect_db import write_data
from functions.func import change_city, search_hotels, change_photo, miles_to_km, period_of_stay, hotel_stars, \
    checking_date_entry, check_date_in, minimum_check_in_date, checking_departure_date, \
    checking_date_entry_date_departure, calc_departure_date
from keyboards.inline.choosing_city import choosing_city
from keyboards.inline.need_photo_yes_or_no import need_photo_yes_or_no
from keyboards.inline.url_button import url_button
from loader import dp, bot
from states.states import FSMHighPrise


@dp.message_handler(commands="highprice", state=None)
async def cmd_highprice(message: types.Message) -> None:
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–∞–≤–ª–∏–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã highprice.
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã highprice –±–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.

    :param message: types.Message
    :return: None
    """
    await FSMHighPrise.user_request.set()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")
    logger.info(f"user_id - {message['from']['id']}, command_name - {message.text}")


@dp.message_handler(state=FSMHighPrise.user_request)
async def choose_city_hp(message: types.Message, state: FSMContext) -> None:
    """
    –•—ç–Ω–¥–ª–µ—Ä –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    –í—ã–≤–æ–¥–∏—Ç –≤ —á–∞—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≥–æ—Ä–æ–¥–æ–≤.

    :param message: types.Message –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    :param state: FSMContext
    :return: None
    """
    logger.info(f"user_id - {message['from']['id']}, entered_text - {message.text}")
    async with state.proxy() as data:
        data['user_request'] = message.text
    my_cities = change_city(data['user_request'])
    if len(my_cities) > 0:
        logger.info(f"user_id - {message['from']['id']}, found_cities - {[i_city for i_city in my_cities.keys()]}")
        await FSMHighPrise.next()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç", reply_markup=choosing_city(my_cities))
        async with state.proxy() as data:
            data['command_name'] = 'highprice'
        await FSMHighPrise.next()
        async with state.proxy() as data:
            data['chat_id'] = message['chat']['id']
        await FSMHighPrise.next()
    else:
        logger.error(f"user_id - {message['from']['id']}, CITY NOT FOUND")
        await message.answer("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")
        await FSMHighPrise.user_request.set()


@dp.callback_query_handler(lambda query: query.data.startswith('next'), state=FSMHighPrise.city_id)
async def choose_date_in_hp(query: types.CallbackQuery, state: FSMContext) -> None:
    """
    –•—ç–Ω–¥–ª–µ—Ä –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç callback_data –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–π –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞.
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ –≤ –æ—Ç–µ–ª—å.

    :param query: types.CallbackQuery –ì–æ—Ä–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    :param state: FSMContext
    :return: None
    """
    logger.info(f"user_id - {query.message['chat']['id']}, "
                f"selected_city - "
                f"{[i_city[0]['text'] for i_city in query.values['message']['reply_markup']['inline_keyboard'] if query.data == i_city[0]['callback_data']][0]}")
    async with state.proxy() as data:
        data['city_id'] = re.search(r'\d\S+', query.data).group(0)
    await FSMHighPrise.next()
    await query.message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ üìÖ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì)')
    await query.answer()


@dp.message_handler(state=FSMHighPrise.check_in_date)
async def choose_date_out_hp(message: types.Message, state: FSMContext) -> None:
    """
    –•—ç–Ω–¥–ª–µ—Ä –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞—Ç—É, –≤–≤–µ–¥–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å.
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞.

    :param message: types.Message –î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ –≤–≤–µ–¥–µ–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    :param state: FSMContext
    :return: None
    """
    async with state.proxy() as data:
        if checking_date_entry(message.text):
            if check_date_in(message.text):
                data['check_in_date'] = '-'.join(reversed('.'.join((re.split('[./,;:]', message.text))).split('.')))
                await FSMHighPrise.next()
                logger.info(f"user_id - {message['from']['id']}, entered_text - {message.text}")
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ üìÖ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì)")
            else:
                await message.answer(f'–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ —Ä–∞–Ω–µ–µ {minimum_check_in_date()}'
                                     f'\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, üìÖ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì)')
                logger.error(f"user_id - {message['from']['id']}, CHECK-IN DATE ENTERED TOO EARLY")
        else:
            await message.answer('–î–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.'
                                 '\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, üìÖ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì)')
            logger.error(f"user_id - {message['from']['id']}, DATE ENTERED INCORRECTLY")


@dp.message_handler(state=FSMHighPrise.check_out_date)
async def choose_hotel_num_hp(message: types.Message, state: FSMContext) -> None:
    """
    –•—ç–Ω–¥–ª–µ—Ä –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ –≤–≤–µ–¥–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å.
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏.

    :param message: types.Message –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –≤–≤–µ–¥–µ–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    :param state: FSMContext
    :return: None
    """
    if checking_date_entry(message.text):
        async with state.proxy() as data:
            if checking_departure_date(data['check_in_date'], message.text):
                if checking_date_entry_date_departure(data['check_in_date'], message.text):
                    data['check_out_date'] = '-'.join(
                        reversed('.'.join((re.split('[./,;:]', message.text))).split('.')))
                    await FSMHighPrise.next()
                    logger.info(f"user_id - {message['from']['id']}, entered_text - {message.text}")
                    await message.reply("–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π –≤—ã–≤–µ—Å—Ç–∏? (–Ω–µ –±–æ–ª–µ–µ 25)")
                else:
                    await message.reply("<b>–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞."
                                        "\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.</b>", parse_mode=ParseMode.HTML)
                    logger.error(f"user_id - {message['from']['id']}, "
                                 f"THE ARRIVAL DATE CANNOT BE EARLIER THAN THE DEPARTURE DATE")
            else:
                await message.answer(f"–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 28 –¥–Ω–µ–π —Å –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞."
                                     f"\n–ö—Ä–∞–π–Ω—è—è –¥–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ "
                                     f"{calc_departure_date('.'.join(list(reversed(data['check_in_date'].split('-')))))}"
                                     f"\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, üìÖ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì)")
                logger.error(f"user_id - {message['from']['id']}, YOU CAN ONLY BOOK A HOTEL FOR 28 DAYS")
    else:
        await message.answer('–î–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.'
                             '\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, üìÖ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì)')
        logger.error(f"user_id - {message['from']['id']}, DATE ENTERED INCORRECTLY")


@dp.message_handler(state=FSMHighPrise.hotels_num)
async def need_photo_hp(message: types.Message, state: FSMContext) -> None:
    """
    –•—ç–Ω–¥–ª–µ—Ä –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    –ò —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ñ–æ—Ç–æ –æ—Ç–µ–ª–µ–π.

    :param message: types.Message –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    :param state: FSMContext
    :return: None
    """
    if 0 < int(message.text) <= 25 and message.text.isdigit():
        async with state.proxy() as data:
            data['hotels_num'] = message.text
        await FSMHighPrise.next()
        logger.info(f"user_id - {message['from']['id']}, entered_text - {message.text}")
        await message.answer("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ñ–æ—Ç–æ üèû –æ—Ç–µ–ª–µ–π?", reply_markup=need_photo_yes_or_no())
    else:
        await message.answer('–í–≤–µ–¥–µ–Ω–æ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–µ–ª–µ–π'
                             '\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 25.')
        logger.error(f"user_id - {message['from']['id']}, YOU CAN WITHDRAW NO MORE THAN 25 HOTELS")


@dp.callback_query_handler(text='yes', state=FSMHighPrise.photo)
async def choose_photo_num_hp(callback: types.CallbackQuery, state: FSMContext) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç callback_data —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º 'yes', –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
    –≤—ã–≤–æ–¥–∏—Ç—å.

    :param callback: types.CallbackQuery callback_data —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º 'yes'
    :param state: FSMContext
    :return: None
    """
    logger.info(f"user_id - {callback['from']['id']}, selected_parameter - {callback.data}")
    async with state.proxy() as data:
        data['photo'] = callback.data
    await FSMHighPrise.next()
    await callback.message.answer("<b>–°–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å? (–Ω–µ –±–æ–ª–µ–µ 10)</b>", parse_mode=ParseMode.HTML)
    await callback.answer()


@dp.callback_query_handler(text='no', state=FSMHighPrise.photo)
async def no_photo_hp(callback: types.CallbackQuery, state: FSMContext) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç callback_data —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º 'no', –∏ –≤—ã–≤–æ–¥–∏—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—Ç–µ–ª–∏.

    :param callback: types.CallbackQuery callback_data —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º 'no'
    :param state: FSMContext
    :return: None
    """
    async with state.proxy() as data:
        data['photo'] = callback.data
    await FSMHighPrise.next()
    logger.info(f"user_id - {callback['from']['id']}, selected_parameter - {callback.data}")
    async with state.proxy() as data:
        data['num_photo'] = 0
        await state.finish()
        await callback.message.answer("–°–ø–∞—Å–∏–±–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        hotels = search_hotels(data['city_id'], data['check_in_date'], data['check_out_date'],
                               data['hotels_num'], 'PRICE_HIGHEST_FIRST')

        if len(hotels) > 0:
            logger.info(f"user_id - {callback['from']['id']}, "
                        f"number_of_hotels - {len(hotels)}, "
                        f"found_hotels - {[i_hotel for i_hotel in hotels]}")
            await callback.message.answer(f'{15 * "-"} –ù–∞–π–¥–µ–Ω–æ {len(hotels)} –æ—Ç–µ–ª–µ–π {15 * "-"}')
            days_of_stay = period_of_stay(data['check_in_date'], data['check_out_date'])
            nums = 0
            search_history_data = {
                'command_name': data['command_name'],
                'user_request': data['user_request'],
                'chat_id': data['chat_id'],
                'datetime': datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'hotels': '\n'.join([i_hotel for i_hotel in hotels.keys()])
            }
            write_data(search_history_data)
            for key, value in hotels.items():
                nums += 1
                hotel_star = hotel_stars(value[3])
                await callback.message.answer(f'{28 * "-"} –û—Ç–µ–ª—å {nums} {27 * "-"}'
                                              f'\nüè® <i><b>{key}</b></i>, '
                                              f'\n{70 * "-"}'
                                              f'\nHotel stars - {hotel_star}'
                                              f'\n–†–µ–π—Ç–∏–Ω–≥ –æ—Ç–µ–ª—è <i>{value[2]}/10</i>'
                                              f'\n–ê–¥—Ä–µ—Å: <i>{value[4]}, {value[5]}</i>'
                                              f'\n–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ <i>{miles_to_km(value[6])} –∫–º.</i>'
                                              f'\n–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –Ω–æ—á—å <i><b>{round(int(value[0]) / days_of_stay)}</b></i> RUB'
                                              f'\n–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥ <i><b>{value[0]}</b></i> RUB'
                                              f'\n{70 * "-"}',
                                              parse_mode=ParseMode.HTML, reply_markup=url_button(value))
                await callback.answer()
            logger.info('search completed successfully'.upper())
        else:
            logger.error(f"user_id - {callback['from']['id']}, NO HOTELS FOUND")
            await callback.message.answer('<b>–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –æ—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.'
                                          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å –∑–∞–Ω–æ–≤–æ.</b>', parse_mode=ParseMode.HTML)
            await callback.answer()


@dp.message_handler(state=FSMHighPrise.num_photo)
async def with_photo_hp(message: types.Message, state: FSMContext) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∏ –≤—ã–≤–æ–¥–∏—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—Ç–µ–ª–∏
    —Å —Ñ–æ—Ç–æ.

    :param message: types.Message –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
    :param state: FSMContext
    :return: None
    """
    if message.text.isdigit() and 0 < int(message.text) <= 10:
        async with state.proxy() as data:
            data['num_photo'] = message.text
        await message.answer("–°–ø–∞—Å–∏–±–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        hotels = search_hotels(data['city_id'], data['check_in_date'], data['check_out_date'],
                               data['hotels_num'], 'PRICE_HIGHEST_FIRST')
        if len(hotels) > 0:
            logger.info(f"user_id - {message['from']['id']}, "
                        f"entered_text - {message.text}, "
                        f"number_of_hotels - {len(hotels)}, "
                        f"found_hotels - {[i_hotel for i_hotel in hotels]}")
            await message.answer(f'{15 * "-"} –ù–∞–π–¥–µ–Ω–æ {len(hotels)} –æ—Ç–µ–ª–µ–π {15 * "-"}')
            await state.finish()
            days_of_stay = period_of_stay(data['check_in_date'], data['check_out_date'])
            nums = 0
            search_history_data = {
                'command_name': data['command_name'],
                'user_request': data['user_request'],
                'chat_id': data['chat_id'],
                'datetime': datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'hotels': '\n'.join([i_hotel for i_hotel in hotels.keys()])
            }
            write_data(search_history_data)
            for key, value in hotels.items():
                hotel_star = hotel_stars(value[3])
                media_group = []
                nums += 1
                for i_photo in change_photo(value[1], int(data['num_photo'])):
                    media_group.append(InputMediaPhoto(i_photo))
                await bot.send_media_group(message.chat.id, media_group)
                await message.answer(f'{28 * "-"} –û—Ç–µ–ª—å {nums} {27 * "-"}'
                                     f'\nüè® <i><b>{key}</b></i>, '
                                     f'\n{70 * "-"}'
                                     f'\nHotel stars - {hotel_star}'
                                     f'\n–†–µ–π—Ç–∏–Ω–≥ –æ—Ç–µ–ª—è <i>{value[2]}/10</i>'
                                     f'\n–ê–¥—Ä–µ—Å: <i>{value[4]}, {value[5]}</i>'
                                     f'\n–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ <i>{miles_to_km(value[6])} –∫–º.</i>'
                                     f'\n–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –Ω–æ—á—å <i><b>{round(int(value[0]) / days_of_stay)}</b></i> RUB'
                                     f'\n–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥ <i><b>{value[0]}</b></i> RUB'
                                     f'\n{70 * "-"}',
                                     parse_mode=ParseMode.HTML, reply_markup=url_button(value))
            logger.info('search completed successfully'.upper())
        else:
            logger.error(f"user_id - {message['from']['id']}, hotels_found - {len(hotels)}")
            await message.answer('<b>–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –æ—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.'
                                 '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å –∑–∞–Ω–æ–≤–æ.</b>', parse_mode=ParseMode.HTML)

    else:
        await message.answer('–í–≤–µ–¥–µ–Ω–æ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π'
                             '\n–°–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å? (–Ω–µ –±–æ–ª–µ–µ 10)')
        logger.error(f"user_id - {message['from']['id']}, YOU CAN OUTPUT NO MORE THAN 10 PHOTOS")


def register_handler_high_price(dp: Dispatcher):
    dp.register_message_handler(cmd_highprice, commands="highprice", state=None)
    dp.register_message_handler(choose_city_hp, state=FSMHighPrise.user_request)
    dp.register_callback_query_handler(choose_date_in_hp, lambda query: query.data.startswith('next'),
                                       state=FSMHighPrise.city_id)
    dp.register_message_handler(choose_date_out_hp, state=FSMHighPrise.check_in_date)
    dp.register_message_handler(choose_hotel_num_hp, state=FSMHighPrise.check_out_date)
    dp.register_message_handler(need_photo_hp, state=FSMHighPrise.hotels_num)
    dp.register_callback_query_handler(choose_photo_num_hp, text='yes', state=FSMHighPrise.photo)
    dp.register_callback_query_handler(no_photo_hp, text='no', state=FSMHighPrise.photo)
    dp.register_message_handler(with_photo_hp, state=FSMHighPrise.num_photo)
